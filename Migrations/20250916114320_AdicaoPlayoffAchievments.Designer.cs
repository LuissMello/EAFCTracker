// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EAFCMatchTracker.Migrations
{
    [DbContext(typeof(EAFCContext))]
    [Migration("20250916114320_AdicaoPlayoffAchievments")]
    partial class AdicaoPlayoffAchievments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchClubEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer");

                    b.Property<short>("Goals")
                        .HasColumnType("smallint");

                    b.Property<short>("GoalsAgainst")
                        .HasColumnType("smallint");

                    b.Property<short>("Losses")
                        .HasColumnType("smallint");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("MatchType")
                        .HasColumnType("smallint");

                    b.Property<short>("Result")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<short>("SeasonId")
                        .HasColumnType("smallint");

                    b.Property<int>("Team")
                        .HasColumnType("integer");

                    b.Property<short>("Ties")
                        .HasColumnType("smallint");

                    b.Property<bool>("WinnerByDnf")
                        .HasColumnType("boolean");

                    b.Property<short>("Wins")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId", "ClubId")
                        .IsUnique();

                    b.ToTable("MatchClubs");
                });

            modelBuilder.Entity("MatchEntity", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<int>("MatchType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MatchPlayerEntity", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerEntityId")
                        .HasColumnType("bigint");

                    b.Property<short>("Assists")
                        .HasColumnType("smallint");

                    b.Property<short>("Cleansheetsany")
                        .HasColumnType("smallint");

                    b.Property<short>("Cleansheetsdef")
                        .HasColumnType("smallint");

                    b.Property<short>("Cleansheetsgk")
                        .HasColumnType("smallint");

                    b.Property<short>("Goals")
                        .HasColumnType("smallint");

                    b.Property<short>("Goalsconceded")
                        .HasColumnType("smallint");

                    b.Property<short>("Losses")
                        .HasColumnType("smallint");

                    b.Property<bool>("Mom")
                        .HasColumnType("boolean");

                    b.Property<short>("Namespace")
                        .HasColumnType("smallint");

                    b.Property<short>("Passattempts")
                        .HasColumnType("smallint");

                    b.Property<short>("Passesmade")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerMatchStatsEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Realtimegame")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Realtimeidle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Redcards")
                        .HasColumnType("smallint");

                    b.Property<short>("Saves")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<short>("Shots")
                        .HasColumnType("smallint");

                    b.Property<short>("Tackleattempts")
                        .HasColumnType("smallint");

                    b.Property<short>("Tacklesmade")
                        .HasColumnType("smallint");

                    b.Property<string>("Vproattr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vprohackreason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Wins")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "ClubId", "PlayerEntityId");

                    b.HasIndex("PlayerEntityId");

                    b.HasIndex("PlayerMatchStatsEntityId");

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("OverallStatsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BestDivision")
                        .HasColumnType("text");

                    b.Property<string>("BestFinishGroup")
                        .HasColumnType("text");

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("GamesPlayed")
                        .HasColumnType("text");

                    b.Property<string>("GamesPlayedPlayoff")
                        .HasColumnType("text");

                    b.Property<string>("Goals")
                        .HasColumnType("text");

                    b.Property<string>("GoalsAgainst")
                        .HasColumnType("text");

                    b.Property<string>("LeagueAppearances")
                        .HasColumnType("text");

                    b.Property<string>("Losses")
                        .HasColumnType("text");

                    b.Property<string>("Promotions")
                        .HasColumnType("text");

                    b.Property<string>("Relegations")
                        .HasColumnType("text");

                    b.Property<string>("Reputationtier")
                        .HasColumnType("text");

                    b.Property<string>("SkillRating")
                        .HasColumnType("text");

                    b.Property<string>("Ties")
                        .HasColumnType("text");

                    b.Property<string>("Unbeatenstreak")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Wins")
                        .HasColumnType("text");

                    b.Property<string>("Wstreak")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId")
                        .IsUnique();

                    b.ToTable("OverallStats");
                });

            modelBuilder.Entity("PlayerEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerMatchStatsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Playername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerMatchStatsId");

                    b.HasIndex("PlayerId", "ClubId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PlayerMatchStatsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Aceleracao")
                        .HasColumnType("smallint");

                    b.Property<short>("Agilidade")
                        .HasColumnType("smallint");

                    b.Property<short>("Cabeceio")
                        .HasColumnType("smallint");

                    b.Property<short>("Carrinho")
                        .HasColumnType("smallint");

                    b.Property<short>("ChuteGL")
                        .HasColumnType("smallint");

                    b.Property<short>("ChuteLonge")
                        .HasColumnType("smallint");

                    b.Property<short>("Combatividade")
                        .HasColumnType("smallint");

                    b.Property<short>("Conducao")
                        .HasColumnType("smallint");

                    b.Property<short>("ControleBola")
                        .HasColumnType("smallint");

                    b.Property<short>("Cruzamento")
                        .HasColumnType("smallint");

                    b.Property<short>("Curva")
                        .HasColumnType("smallint");

                    b.Property<short>("DivididaEmPe")
                        .HasColumnType("smallint");

                    b.Property<short>("ElasticidadeGL")
                        .HasColumnType("smallint");

                    b.Property<short>("Equilibrio")
                        .HasColumnType("smallint");

                    b.Property<short>("Falta")
                        .HasColumnType("smallint");

                    b.Property<short>("Finalizacao")
                        .HasColumnType("smallint");

                    b.Property<short>("Folego")
                        .HasColumnType("smallint");

                    b.Property<short>("Forca")
                        .HasColumnType("smallint");

                    b.Property<short>("ForcaDoChute")
                        .HasColumnType("smallint");

                    b.Property<short>("Frieza")
                        .HasColumnType("smallint");

                    b.Property<short>("Impulsao")
                        .HasColumnType("smallint");

                    b.Property<short>("Interceptacaos")
                        .HasColumnType("smallint");

                    b.Property<short>("Lancamento")
                        .HasColumnType("smallint");

                    b.Property<short>("ManejoGL")
                        .HasColumnType("smallint");

                    b.Property<short>("NocaoDefensiva")
                        .HasColumnType("smallint");

                    b.Property<short>("PasseCurto")
                        .HasColumnType("smallint");

                    b.Property<short>("Penalti")
                        .HasColumnType("smallint");

                    b.Property<short>("Pique")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerEntityId")
                        .HasColumnType("bigint");

                    b.Property<short>("PosAtaqueInutil")
                        .HasColumnType("smallint");

                    b.Property<short>("PosGL")
                        .HasColumnType("smallint");

                    b.Property<short>("Reacao")
                        .HasColumnType("smallint");

                    b.Property<short>("ReflexosGL")
                        .HasColumnType("smallint");

                    b.Property<short>("Visao")
                        .HasColumnType("smallint");

                    b.Property<short>("Voleio")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("PlayoffAchievementEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BestDivision")
                        .HasColumnType("text");

                    b.Property<string>("BestFinishGroup")
                        .HasColumnType("text");

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RetrievedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeasonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ClubId", "SeasonId")
                        .IsUnique();

                    b.ToTable("PlayoffAchievements");
                });

            modelBuilder.Entity("MatchClubEntity", b =>
                {
                    b.HasOne("MatchEntity", "Match")
                        .WithMany("Clubs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ClubDetailsEntity", "Details", b1 =>
                        {
                            b1.Property<long>("MatchClubEntityId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ClubId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CrestAssetId")
                                .HasColumnType("text");

                            b1.Property<string>("CrestColor")
                                .HasColumnType("text");

                            b1.Property<string>("CustomAwayKitId")
                                .HasColumnType("text");

                            b1.Property<string>("CustomKeeperKitId")
                                .HasColumnType("text");

                            b1.Property<string>("CustomKitId")
                                .HasColumnType("text");

                            b1.Property<string>("CustomThirdKitId")
                                .HasColumnType("text");

                            b1.Property<string>("DCustomKit")
                                .HasColumnType("text");

                            b1.Property<string>("KitAColor1")
                                .HasColumnType("text");

                            b1.Property<string>("KitAColor2")
                                .HasColumnType("text");

                            b1.Property<string>("KitAColor3")
                                .HasColumnType("text");

                            b1.Property<string>("KitAColor4")
                                .HasColumnType("text");

                            b1.Property<string>("KitColor1")
                                .HasColumnType("text");

                            b1.Property<string>("KitColor2")
                                .HasColumnType("text");

                            b1.Property<string>("KitColor3")
                                .HasColumnType("text");

                            b1.Property<string>("KitColor4")
                                .HasColumnType("text");

                            b1.Property<string>("KitId")
                                .HasColumnType("text");

                            b1.Property<string>("KitThrdColor1")
                                .HasColumnType("text");

                            b1.Property<string>("KitThrdColor2")
                                .HasColumnType("text");

                            b1.Property<string>("KitThrdColor3")
                                .HasColumnType("text");

                            b1.Property<string>("KitThrdColor4")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<long>("RegionId")
                                .HasColumnType("bigint");

                            b1.Property<string>("SelectedKitType")
                                .HasColumnType("text");

                            b1.Property<string>("StadName")
                                .HasColumnType("text");

                            b1.Property<long>("TeamId")
                                .HasColumnType("bigint");

                            b1.HasKey("MatchClubEntityId");

                            b1.ToTable("MatchClubs");

                            b1.WithOwner()
                                .HasForeignKey("MatchClubEntityId");
                        });

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("MatchPlayerEntity", b =>
                {
                    b.HasOne("MatchEntity", "Match")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerEntity", "Player")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PlayerMatchStatsEntity", "PlayerMatchStats")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("PlayerMatchStatsEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerMatchStats");
                });

            modelBuilder.Entity("PlayerEntity", b =>
                {
                    b.HasOne("PlayerMatchStatsEntity", "PlayerMatchStats")
                        .WithMany()
                        .HasForeignKey("PlayerMatchStatsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlayerMatchStats");
                });

            modelBuilder.Entity("PlayerMatchStatsEntity", b =>
                {
                    b.HasOne("PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MatchEntity", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("PlayerEntity", b =>
                {
                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("PlayerMatchStatsEntity", b =>
                {
                    b.Navigation("MatchPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
